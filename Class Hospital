import java.text.SimpleDateFormat;
import java.util.*;
import java.util.ArrayList;
public class Hospital {

    private Map<String, Patient> totalPatient;
    private PriorityQueue<Patient> attentionQueue; //cola general
    private Map<String, AreaAttention> areasAttention;// asignar paciente a areas especificas
    private List<Patient> patientAttended;// pacientes para la casa
    private long simulationStartTime; //para simulacion


    Hospital() {
        this.totalPatient = new HashMap<>();
        this.areasAttention = new HashMap<>();
        this.patientAttended = new ArrayList<>();

        AreaAttention sapu = new AreaAttention("SAPU", 100);
        sapu.setSimulationStartTime(simulationStartTime);//para simulacion

        AreaAttention adulto = new AreaAttention("Urgencia adulto", 300);
        adulto.setSimulationStartTime(simulationStartTime);//para simulacion

        AreaAttention infantil = new AreaAttention("Infantil", 500);
        infantil.setSimulationStartTime(simulationStartTime);//para simulacion

        areasAttention.put("SAPU", sapu);
        areasAttention.put("Urgencia adulto", adulto);
        areasAttention.put("Infantil", infantil);
        areasAttention.put("Senate", new AreaAttention("Senate", 100));

        System.out.println("√Åreas registradas en el hospital: " + areasAttention.keySet());

        Comparator<Patient> c = new Comparator<Patient>() {//evaluar los peores caso para el informe
            public int compare(Patient p1, Patient p2) {
                if (p1.getCategoria() < p2.getCategoria()) {
                    return -1;
                }
                if (p1.getCategoria() > p2.getCategoria()) {
                    return 1;
                } else {//tienen la misma categoria, se resuelve en base a su orden de llegada
                    if (p1.getArrivalOffset() < p2.getArrivalOffset()) {//pendiente-> posible solucion crear un metodo que compare la horas
                        return -1;
                    }
                    if (p1.getArrivalOffset() > p2.getArrivalOffset()) {//pendiente
                        return 1;
                    } else {
                        return 0;
                    }
                }
            }
        };

        this.attentionQueue = new PriorityQueue<>(c);
    }

    private String DetermineAreaAccordingCategory(int categoria) {// una forma para asignarle un area en especifica
        if (categoria == 1 || categoria == 2) return "Urgencia adulto";
        else if (categoria == 3 || categoria == 4) return "SAPU";
        else return "Infantil";
    }

    public void registerPatient(Patient patient){//usar para la simulacion
        String id = patient.getID();
        if (totalPatient.containsKey(id)) {//verifica si no esta registrado
            System.out.println("Paciente ya registrado");
        } else {
            totalPatient.put(id, patient); //agrrga al mapa
            String area = DetermineAreaAccordingCategory(patient.getCategoria());
            patient.setArea(area);
            attentionQueue.add(patient);//agreega a cola de atencion
            //designar area de atencion
        }
    }

    public Patient nextpatient(){
        if(attentionQueue.isEmpty()){
            System.out.println("No se encuentran mas pacientes");
            return null;
        }
        Patient patient = attentionQueue.poll();// saca al paciente borrandolo del sistema y lo agrega a su respectiva a su area correspondiente
        String areaName = DetermineAreaAccordingCategory(patient.getCategoria());
        AreaAttention area = areasAttention.get(areaName);

        if(area != null){
            area.addPatient(patient);
            System.out.println("Paciente " + patient.getID() + " asignado a √°rea " + areaName);
            return patient;
        }else{
            System.out.println("√Årea " + areaName + " no encontrada.");
        }
        return null;
    }

    public void realiseCategory(String ID, int newCategory){
        Patient patient = totalPatient.get(ID);
        attentionQueue.remove(patient);//lo quita de la cola
        patient.setCategory(newCategory);
        attentionQueue.add(patient);
    }

    public List<Patient> getPatientsByCategory(int categoria){
        List<Patient> pacientesFiltrados = new ArrayList<>();
        for (Patient paciente : attentionQueue) {
            if (paciente.getCategoria() == categoria && paciente.getState().equals("En espera")) {
                pacientesFiltrados.add(paciente);
            }
        }
        return pacientesFiltrados;
    }

    public AreaAttention getArea(String nameArea){
        if (areasAttention.containsKey(nameArea)) {
            return areasAttention.get(nameArea);
        } else {
            System.out.println("√Årea no encontrada: " + nameArea);
            return null;
        }
    }

    // implementacion para la simulacion

    public static long getMaxWaitTimeByCategory(int category) {//recuerda pasarlo a minutos
        switch (category) {
            case 1: return 0;                     // inmediato
            case 2: return 30 * 1000;        // 30 minutos
            case 3: return 90 * 1000;        // 1h30min
            case 4: return 180 *  1000;       // 3h
            case 5: return Long.MAX_VALUE;        // sin l√≠mite
            default: return Long.MAX_VALUE;       // por si acaso
        }
    }

    public void setSimulationStartTime(long time) {
        this.simulationStartTime = time;
    }

    public List<Patient> obtenerPacientesExcedidos() {
        List<Patient> urgentes = new ArrayList<>();
        long tiempoSimulado  = System.currentTimeMillis() - simulationStartTime;

        for (Patient p : attentionQueue) {
            long tiempoEsperando = tiempoSimulado  - p.getArrivalOffset();
            long tiempoMaximo = getMaxWaitTimeByCategory(p.getCategoria());

            if (tiempoEsperando >= tiempoMaximo && p.getCategoria() != 1) {
                urgentes.add(p);
            }
        }
        return urgentes;
    }
    public Queue<Patient> getAttentionQueue() {
        return attentionQueue;
    }

    public void forzarAtencion(Patient paciente) {
        // Calcular el tiempo de espera real
        long tiempoSimulado = System.currentTimeMillis() - simulationStartTime;
        long waiting = tiempoSimulado - paciente.getArrivalOffset();
        paciente.setWaitingTime(waiting); // üíæ Registrar tiempo de espera

        // 1. Sacarlo de donde est√©
        if (attentionQueue.contains(paciente)) {
            attentionQueue.remove(paciente);
        } else {
            String areaName = paciente.getArea();
            AreaAttention area = areasAttention.get(areaName);
            if (area != null) {
                area.removePatient(paciente);
            }
        }

        // 2. Marcar como atendido y registrar
        paciente.setState("Atendido");
        paciente.recordChange("Atenci√≥n forzada por tiempo excedido");
        patientAttended.add(paciente);

        System.out.println("Paciente " + paciente.getID() + " atendido forzadamente tras esperar " + (waiting / 1000) + " segundos");
    }
    public void registrarAtencion(Patient p) {
        if (p != null) {
            patientAttended.add(p);
        }
    }
    public List<Patient> getPatientAttended() {
        return patientAttended;
    }
    public Map<String, AreaAttention> getAreas() {
        return areasAttention;
    }
    public List<Patient> getAtendidos() {
        return patientAttended;
    }

}
