import java.text.SimpleDateFormat;
import java.util.*;
import java.util.ArrayList;
public class Hospital {

    private Map<String, Patient> totalPatient;
    private PriorityQueue<Patient> attentionQueue; //gestiona a los pacientes en espera
    private Map<String, AreaAttention> areasAttention;// asignar paciente a areas especificas
    private List<Patient> patientAttended;// pacientes para la casa

    Hospital() {
        this.totalPatient = new HashMap<>();
        this.areasAttention = new HashMap<>();
        this.patientAttended = new ArrayList<>();

        areasAttention.put("SAPU", new AreaAttention("SAPU", 90));
        areasAttention.put("Urgencia adulto", new AreaAttention("Urgencia adulto", 120));
        areasAttention.put("Infantil", new AreaAttention("Infantil", 100));

        Comparator<Patient> c = new Comparator<Patient>() {//evaluar los peores caso para el informe
            public int compare(Patient p1, Patient p2) {
                if (p1.getCategoria() < p2.getCategoria()) {
                    return -1;
                }
                if (p1.getCategoria() > p2.getCategoria()) {
                    return 1;
                } else {//tienen la misma categoria, se resuelve en base a su orden de llegada
                    if (p1.getArrivalTime() < p2.getArrivalTime()) {//pendiente-> posible solucion crear un metodo que compare la horas
                        return -1;
                    }
                    if (p1.getArrivalTime() > p2.getArrivalTime()) {//pendiente
                        return 1;
                    } else {
                        return 0;
                    }
                }
            }
        };

        this.attentionQueue = new PriorityQueue<>(c);
    }


    private String DetermineAreaAccordingCategory(int categoria) {// una forma para asignarle un area en especifica
        if (categoria == 1 || categoria == 2) return "urgencia_adulto";
        else if (categoria == 3 || categoria == 4) return "SAPU";
        else return "infantil";
    }

    public void registerPatient(Patient patient){//usar para la simulacion
        String id = patient.getID();
        if (totalPatient.containsKey(id)) {//verifica si no esta registrado
            System.out.println("Paciente ya registrado");
        } else {
            totalPatient.put(id, patient); //agrrga al mapa
            String area = DetermineAreaAccordingCategory(patient.getCategoria());
            patient.setArea(area);
            attentionQueue.add(patient);//agreega a cola de atencion
        }
    }

    public void realiseCategory(String ID, int newCategory){
        Patient patient = totalPatient.get(ID);
        attentionQueue.remove(patient);//lo quita de la cola
        patient.setCategory(newCategory);
        attentionQueue.add(patient);
        patient.recordChange("Categoria cambiada a C" + newCategory);
    }

    public Patient nextpatient(){
        if(attentionQueue.isEmpty()){
            System.out.println("No patients attention available");
            return null;
        }
        Patient patient = attentionQueue.poll();// deberia ya estar ordenado
        String areaName = DetermineAreaAccordingCategory(patient.getCategoria());
        AreaAttention area = areasAttention.get(areaName);

        if(area != null){
            area.addPatient(patient);
            System.out.println("Paciente " + patient.getID() + " asignado a área " + areaName);
            return patient;
        }else{
            System.out.println("Área " + areaName + " no encontrada.");
        }
        return null;
    }

    public List<Patient> getPatientsByCategory(int categoria){
        List<Patient> pacientesFiltrados = new ArrayList<>();
        for (Patient paciente : attentionQueue) {
            if (paciente.getCategoria() == categoria && paciente.getState().equals("En espera")) {
                pacientesFiltrados.add(paciente);
            }
        }
        return pacientesFiltrados;
    }

    public AreaAttention getArea(String nameArea){
        if (areasAttention.containsKey(nameArea)) {
            return areasAttention.get(nameArea);
        } else {
            System.out.println("Área no encontrada: " + nameArea);
            return null;
        }
    }
}
