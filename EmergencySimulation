import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Arrays;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.FileWriter;
import java.util.Map;
import java.util.HashMap;
public class EmergencySimulation{

    private List<Patient> randomPatient = GeneratePatient.leerDatos("simulacion.txt");
    private final long addInterval;
    private final long attendInterval;
    private Hospital quilicura;
    public EmergencySimulation() {
        this.addInterval = 10 * 1000L;
        this.attendInterval = 15 * 1000L;
    }

    public void simulator(int pacientesPorDia){// colocar cantidad de paciente que se quieren atender

        SimpleDateFormat formato= new SimpleDateFormat("HH:mm:ss");//formato.format(currentTime) -> Para mostrar en hh:mm:ss

        long minute = 60 * 1000;
        long interval_24H =  24 * minute;

        long startTime = System.currentTimeMillis();//Tiempo de partida
        long lastPatientAdded = startTime;
        long lastPatientAttended = startTime;
        // pruebas
        Patient pacienteC4 = null;
        for (Patient p : randomPatient) {
            if (p.getCategoria() == 4) {
                pacienteC4 = p;
                break;
            }
        }
        if (pacienteC4 == null) {
            System.out.println("No hay pacientes C4 en los datos de simulación.");
            return;
        }
        String idC4 = pacienteC4.getID();
        long registroOffsetC4 = -1;   // para guardar el offset simulado al registrarlo
        boolean c4Atendido = false;
        long tiempoEsperaC4 = -1;
        //pruebas

        this.quilicura = new Hospital();
        quilicura.setSimulationStartTime(startTime);// necesario para saber cuando llegan los pacientes

        for (AreaAttention area : quilicura.getAreas().values()) {
            area.setSimulationStartTime(startTime);
        }

        int atendidos = 0;
        int c = 0;

        while (System.currentTimeMillis() - startTime < interval_24H && atendidos < pacientesPorDia) {
            long currentTime = System.currentTimeMillis(); // Tiempo transcurrido

            if (currentTime - lastPatientAdded >= addInterval) { // cada 10 min (registra)

                if(c < randomPatient.size()){
                    Patient patient = randomPatient.get(c);
                    long tiempoSimulado = currentTime - startTime;

                    if (tiempoSimulado >= patient.getArrivalOffset()) {
                        quilicura.registerPatient(patient);
                        c++;
                        System.out.println("[REGISTRO] Paciente " + patient.getFullName() + " registrado a los " + (tiempoSimulado / 1000) + " segundos");
                    }
                }else{
                    System.out.println("No se encuentran mas pacientes");
                }
                lastPatientAdded = currentTime;
            }

            if (currentTime - lastPatientAttended >= attendInterval) { // cada 15 min(atender)
                if (!randomPatient.isEmpty()) {
                    List<Patient> pacientesExcedidos = quilicura.obtenerPacientesExcedidos();

                    if (!pacientesExcedidos.isEmpty()) {
                        Patient p = pacientesExcedidos.get(0);

                        long tiempoSimulado = System.currentTimeMillis() - startTime;
                        long tiempoEsperando = tiempoSimulado - p.getArrivalOffset();
                        long tiempoMaximo = Hospital.getMaxWaitTimeByCategory(p.getCategoria());

                        System.out.println("[DEBUG] Paciente " + p.getID() +
                                " esperando " + tiempoEsperando + " ms, límite = " + tiempoMaximo);

                        quilicura.forzarAtencion(p);
                    } else {
                        // Asignar pacientes desde la cola general
                        if (quilicura.getAttentionQueue().size() >= 3) {
                            for (int i = 0; i < 2; i++) {
                                quilicura.nextpatient(); // SOLO asignar
                            }
                        } else if (!quilicura.getAttentionQueue().isEmpty()) {
                            quilicura.nextpatient(); // SOLO asignar
                        }
                    }

                    // Ahora cada área atiende si puede
                    for (String areaName : Arrays.asList("SAPU", "Urgencia adulto", "Infantil")) {
                        AreaAttention area = quilicura.getArea(areaName);
                        if (area != null && !area.isEmpty()) {
                            Patient atendido = area.attendPatient();
                            long tiempoEspera = atendido.currentTimeout();//**
                            if (atendido != null) {
                                quilicura.registrarAtencion(atendido);
                                atendidos++;
                            }
                        }
                    }

                    lastPatientAttended = currentTime;
                } else {
                    System.out.println("No hay pacientes registrados.");
                }
            }

            // Pequeña pausa para no saturar la CPU
            try {
                Thread.sleep(1000); // espera un minuto
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
    public void guardarTiemposAtencion(String archivo) {
        try (FileWriter writer = new FileWriter(archivo)) {
            writer.write("ID,Nombre,Categoría,Tiempo de Espera (segundos)\n");

            for (Patient p : quilicura.getAtendidos()) {
                writer.write(p.getID() + "," + p.getFullName() + "," +
                        p.getCategoria() + "," + (p.getWaitingTime() / 1000) + "\n");
            }

            System.out.println("Archivo con tiempos de atención guardado: " + archivo);

        } catch (IOException e) {
            System.err.println("Error al guardar tiempos de atención: " + e.getMessage());
        }
    }
    public void mostrarCantidadPacientesPorCategoria() {
        Map<Integer, Integer> contadorPorCategoria = new HashMap<>();

        // Inicializar contadores en 0 para cada categoria 1 a 5
        for (int i = 1; i <= 5; i++) {
            contadorPorCategoria.put(i, 0);
        }

        for (Patient p : quilicura.getAtendidos()) {
            int cat = p.getCategoria();
            contadorPorCategoria.put(cat, contadorPorCategoria.get(cat) + 1);
        }

        System.out.println("Cantidad de pacientes atendidos por categoría:");
        for (int i = 1; i <= 5; i++) {
            System.out.println("Categoría C" + i + ": " + contadorPorCategoria.get(i));
        }
    }
    public void mostrarPromedioEsperaPorCategoria() {
        Map<Integer, long[]> esperaPorCategoria = new HashMap<>();

        for (Patient p : quilicura.getAtendidos()) {
            int cat = p.getCategoria();
            long tiempo = p.getWaitingTime();

            esperaPorCategoria.putIfAbsent(cat, new long[]{0L, 0L});
            long[] sumaContador = esperaPorCategoria.get(cat);

            sumaContador[0] += tiempo;   // suma de tiempos en ms
            sumaContador[1] += 1;        // contador
        }

        System.out.println("Promedio de tiempo de espera por categoría:");
        for (Map.Entry<Integer, long[]> entry : esperaPorCategoria.entrySet()) {
            int categoria = entry.getKey();
            long[] sumaContador = entry.getValue();
            long suma = sumaContador[0];
            long count = sumaContador[1];

            double promedioSegundos = (double) suma / count / 1000.0; // ms a segundos

            System.out.printf("Categoría C%d: %.2f segundos%n", categoria, promedioSegundos);
        }
    }
    public List reportePacientesExcedidos() {
        List<Patient> pacientesExcedidos = quilicura.obtenerPacientesExcedidos();
        return List.of();
    }
    public static void main(String[] args) {

        EmergencySimulation sim = new EmergencySimulation();
        sim.simulator(100);
        sim.guardarTiemposAtencion("tiempos_atencion.csv");
        sim.mostrarCantidadPacientesPorCategoria();
        sim.mostrarPromedioEsperaPorCategoria();
        sim.reportePacientesExcedidos();
        /**Para mostrar el tiempo que se demoro en atender a cada paciente
          for (Patient p : quilicura.getAtendidos()) {
            System.out.println("Paciente " + p.getID() + " fue atendido tras esperar " + (p.getWaitingTime() / 1000) + " segundos");
         }
         **/


    }

}

