import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Arrays;
public class EmergencySimulation{

    private List<Patient> randomPatient = GeneratePatient.leerDatos("simulacion.txt");
    private final long addInterval;
    private final long attendInterval;

    public EmergencySimulation() {
        this(2 * 1000L, 3 * 1000L);
    }

    public EmergencySimulation(long addInterval, long attendInterval) {
        this.addInterval = addInterval;
        this.attendInterval = attendInterval;
    }


    public void simulator(){// integra y atiende paciente en los tiempos indicados

        SimpleDateFormat formato= new SimpleDateFormat("HH:mm:ss");//formato.format(currentTime) -> Para mostrar en hh:mm:ss


        long minute = 60 * 1000;
        long interval_24H =  60 * minute;//24*60*minute
        //ong addInterval = 10 * minute;
        //long attendInterval = 15 * minute;


        long startTime = System.currentTimeMillis();//Tiempo de partida
        long lastPatientAdded = startTime;
        long lastPatientAttended = startTime;

        Hospital quilicura = new Hospital();

        int c = 0;

        while (System.currentTimeMillis() - startTime < minute) {
            long currentTime = System.currentTimeMillis(); // Tiempo transcurrido

            if (currentTime - lastPatientAdded >= addInterval) { // cada 10 min (registra)

                if(c<randomPatient.size()){
                    Patient patient = randomPatient.get(c);
                    if (currentTime >= patient.getArrivalTime()) {
                        quilicura.registerPatient(patient);
                        c++;
                        System.out.println("[REGISTRO] Paciente " + patient.getFullName() + " registrado a las " + formato.format(currentTime));
                    }
                }else{
                    System.out.println("No se encuentran mas pacientes");
                }
                lastPatientAdded = currentTime;
            }

            if (currentTime - lastPatientAttended >= attendInterval) { // cada 15 min(atender)
                if (!randomPatient.isEmpty()) {
                    List<Patient> pacientesExcedidos = quilicura.obtenerPacientesExcedidos();

                    if (!pacientesExcedidos.isEmpty()) {
                        quilicura.forzarAtencion(pacientesExcedidos.get(0));
                    } else {
                        // Asignar pacientes desde la cola general
                        if (quilicura.getAttentionQueue().size() >= 3) {
                            for (int i = 0; i < 2; i++) {
                                quilicura.nextpatient(); // SOLO asignar
                            }
                        } else if (!quilicura.getAttentionQueue().isEmpty()) {
                            quilicura.nextpatient(); // SOLO asignar
                        }
                    }

                    // Ahora cada área atiende si puede
                    for (String areaName : Arrays.asList("SAPU", "Urgencia adulto", "Infantil")) {
                        AreaAttention area = quilicura.getArea(areaName);
                        if (area != null && !area.isEmpty()) {
                            Patient atendido = area.attendPatient();
                            long tiempoEspera = atendido.currentTimeout();//**
                            quilicura.registrarAtencion(atendido);
                        }
                    }

                    lastPatientAttended = currentTime;
                } else {
                    System.out.println("No hay pacientes registrados.");
                }
            }

            // Pequeña pausa para no saturar la CPU
            try {
                Thread.sleep(100); // espera un minuto
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    public static void main(String[] args) {

        EmergencySimulation sim = new EmergencySimulation();
        sim.simulator();

    }

}
/*

C1 – Emergencia Vital: atención inmediata.
C2 – Urgencia / Alta Complejidad: hasta 30 minutos.
C3 – Mediana Complejidad: hasta 1 hora y 30 minutos.
C4 – Baja Complejidad: hasta 3 horas.
C5 – Atención General: sin tiempo máximo, depende de demanda

aca te dejare algunas dudas que tengo a ver si me puedes ayudar a hacer los distintas partes de este codigo, quiero ir despacion
y de forma que comprenda lo que estoy haciendo porfavor.
mis dudas son en como implementar las condiciones del tiempo maximo de cada paciente que aparecen en condicines claves de atencion
y como ir trabajando con las otras clases que tengo ya que debo ir creando objeto con ellos pero no entiendo muy bien aquello,



cambiar a horas reales
*/
